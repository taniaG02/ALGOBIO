---
title: "Ejercicios2_algoritmos"
author: "Tania Gonzalo y Daniel Parra"
format: pdf
lang: es 
---

## WORKSHEET

### Ejercicio 1 (4 puntos)

*En este ejercicio probarás el algoritmo Needleman-Wunsch en una secuencia corta de partes de hemoglobina (código PDB 1AOW) y mioglobina 1 (código PDB 1AZI). Aquí alineará la secuencia HGSAQVKGHG con la secuencia KTEAEMKASEDLKKHGT.*

*Las dos secuencias están dispuestas en una matriz en la Tabla 1. Las secuencias comienzan en la esquina superior derecha, y las penalizaciones por desfase inicial se enumeran en cada posición inicial de desfase. La penalización por desfase se considera -8. Las puntuaciones de similitud Si,j procedentes de la búsqueda de coincidencias proceden de la tabla BLOSUM40.*

Para resolver este ejercicio, hemos aplicado el algoritmo de Needleman-Wunsch para alinear dos secuencias de proteínas que nos indican: una parte de la hemoglobina (HGSAQVKGHG) y una parte de la mioglobina (KTEAEMKASEDLKKHGT). Este algoritmo de alineamiento global nos permite encontrar la mejor correspondencia entre las secuencias considerando inserciones, eliminaciones y sustituciones de aminoácidos.

Para llevar a cabo la alineación, seguimos los siguientes pasos:

1.  **Inicialización de la matriz**: Se construyó una matriz en la que las secuencias se dispusieron en los ejes horizontal y vertical. Se asignaron penalizaciones de apertura de brecha (-8) en la primera fila y la primera columna.

2.  **Cálculo de los valores en la matriz**: Cada celda se llenó utilizando la fórmula de Needleman-Wunsch:

    $$
    F(i,j) = \max \begin{cases} 
    F(i-1,j-1) + S(i,j) & \text{(match o mismatch según la matriz BLOSUM40)} \\
    F(i-1,j) + \text{gap penalty} & \text{(inserción)} \\
    F(i,j-1) + \text{gap penalty} & \text{(eliminación)}
    \end{cases}
    $$

    Donde $S(i,j)$ es el puntaje de sustitución obtenido de la matriz BLOSUM40.

    La tabla obtenida se muestra en @fig-ej1 donde aparecen todas las celdas rellenas además de las flechas indicativas de la procedencia de cada uno de los números para posteriormente poder llevar a cabo la recontrucción del alineamiento.

3.  **Obtención del score final**: Una vez completada la matriz, el score final de alineación se encuentra en la casilla inferior derecha (@fig-ej1). Como podemos observar, en nuestro caso el score optenido es de -21.

4.  **Retroceso para encontrar las alineaciones óptimas**: Siguiendo las flechas que indicaban la mejor elección en cada celda, realizamos un recorrido inverso para reconstruir los alineamientos óptimos. Encontramos dos posibles caminos (alternativas), lo que dio lugar a dos alineaciones diferentes, ambos mostrados en la parte inferior de la @fig-ej1.

Este procedimiento nos permitió obtener una alineación óptima de las secuencias, teniendo en cuenta tanto coincidencias como penalizaciones por inserciones y eliminaciones.

![Solución manual del ejercicio 1. En la parte superior se mmuestra la matriz obtenida tras la aplicación del algoritmo de Needleman-Wunsch. En la parte inferior se muestran los dos alineamientos óptimos obtenidos.](Solucion_Ej1_Dani.jpeg){#fig-ej1}

{{< pagebreak >}}

### Ejercicio 2 (6 puntos)

*Dado el conjunto de secuencias múltiples:*

-   *S1: PPGVKSDCAS*

-   *S2: PADGVKDCAS*

-   *S3: PPDGKSDS*

-   *S4: GADGKDCCS*

-   *S5: GADGKDCAS*

*Utilice el popular método de alineación progresiva para alinear globalmente el conjunto anterior de secuencias. Genere el árbol guía por unión de vecinos. Compare su resultado (alineamiento) con el de Clustal-Omega.*

*Con el alineamiento final representa el logo. Para este proposito los caracteres nulos o gap son ignorados y no cuentan para el número de observaciones de una columna.*

Para la resolución de este ejercicio nos piden levar a cabo un alineación global de secuencias mediante alineación progresiva, donde el conjunto de secuencias con las que se trabaja es:

| Secuencia | Cadena     |
|-----------|------------|
| S1        | PPGVKSDCAS |
| S2        | PADGVKDCAS |
| S3        | PPDGKSDS   |
| S4        | GADGKDCCS  |
| S5        | GADGKDCAS  |

### Metodología

Para este ejercicio se utilizó el método de alineación progresiva para realizar el alineamiento global de las secuencias. Se llevaron a cabo los siguientes pasos:

-   **Alineamientos por pares**: Se utilizaron las herramientas EMBOSS Needle y Pairwise Sequence Alignment (PSA) para generar alineamientos dos a dos entre las secuencias.

-   **Construcción de la matriz de distancias**: A partir de los alineamientos, se calculó una matriz de distancias basada en los valores de similitud entre las secuencias de forma manual.

-   **Generación del árbol guía de forma manual**: Se empleó el método de unión de vecinos (Neighbor Joining) para construir el árbol guía a partir de la matriz de distancias.

-   **Alineamiento progresivo manual**: Utilizando el árbol guía, se realizó el alineamiento progresivo de las secuencias.

-   **Comparación con Clustal Omega**: Se comparó el alineamiento obtenido con el generado por Clustal Omega (1.2.4).

-   **Generación del logo de secuencias**: Finalmente, se representó el alineamiento en formato de logo ignorando los caracteres nulos o gaps mediante el uso de las siguientes librerías en Python para el análisis y visualización de secuencias biológicas: `Biopython` (módulo AlignIO) para la manipulación de alineamientos de secuencias, `Logomaker` para la generación de logotipos de secuencia, `Matplotlib` para la visualización gráfica y `NumPy` para el procesamiento numérico.

#### 1. Alineamientos por pares

Para los alineamientos por pares se utilizaron los siguientes parámetros:

-   **Matriz de sustitución**: BLOSUM40
-   **Penalización por gap**: -10 (aproximado a -8, usado en el ejercicio anterior)

Estos también se muestran en la figura @fig-ej2-1.

![Parámetros para el alineamiento dos a dos.](Ej2/Parametros_pairwise.png){#fig-ej2-1}

Se calcularon los alineamientos y sus respectivos scores, definidos como la relación entre el número de coincidencias y la cantidad total de residuos (excluyendo gaps). Los resultados obtenidos fueron los siguientes:

| Secuencias comparadas | Longitud 1 | Longitud 2 | Coincidencias | Score |
|-----------------------|------------|------------|---------------|-------|
| S1 vs S2              | 10         | 10         | 8             | 8/10  |
| S1 vs S3              | 10         | 8          | 5             | 5/9   |
| S1 vs S4              | 10         | 9          | 4             | 8/19  |
| S1 vs S5              | 10         | 9          | 5             | 10/19 |
| S2 vs S3              | 10         | 8          | 4             | 4/9   |
| S2 vs S4              | 10         | 9          | 7             | 14/19 |
| S2 vs S5              | 10         | 9          | 8             | 16/19 |
| S3 vs S4              | 8          | 9          | 4             | 8/17  |
| S3 vs S5              | 8          | 9          | 3             | 6/17  |
| S4 vs S5              | 9          | 9          | 8             | 8/9   |

Los resultados de los alineamientos obtenidos los podemos observar a continuación:

![Alineamiento dos a dos de S1 vs S2, con 10 aa cada secuencia y 8 coincidencias, tiene un score 8/10.](Ej2/Alineamiento_2a2_S1-S2.png)

![Alineamiento dos a dos de S1 vs S3, con 10 aa en S1 y 8 aa en S3; y 5 coincidencias, tiene un score 5/9.](Ej2/Alineamiento_2a2_S1-S3.png)

![Alineamiento dos a dos de S1 vs S4, con 10 aa en S1 y 9 aa en S4; y 4 coincidencias, tiene un score 8/19.](Ej2/Alineamiento_2a2_S1-S4.png)

![Alineamiento dos a dos de S1 vs S5, con 10 aa en S1 y 9 aa en S5; y 5 coincidencias, tiene un score 10/19.](Ej2/Alineamiento_2a2_S1-S5.png)

![Alineamiento dos a dos de S2 vs S3, con 10 aa en S2 y 8 aa en S3; y 4 coincidencias, tiene un score 4/9.](Ej2/Alineamiento_2a2_S2-S3.png)

![Alineamiento dos a dos de S2 vs S4, con 10 aa en S2 y 9 aa en S4; y 7 coincidencias, tiene un score 14/19.](Ej2/Alineamiento_2a2_S2-S4.png)

![Alineamiento dos a dos de S2 vs S5, con 10 aa en S2 y 9 aa en S5; y 8 coincidencias, tiene un score 16/19.](Ej2/Alineamiento_2a2_S2-S5.png)

![Alineamiento dos a dos de S3 vs S4, con 8 aa en S3 y 9 aa en S4; y 4 coincidencias, tiene un score 8/17.](Ej2/Alineamiento_2a2_S3-S4.png)

![Alineamiento dos a dos de S3 vs S5, con 8 aa en S3 y 9 aa en S5; y 3 coincidencias, tiene un score 6/17.](Ej2/Alineamiento_2a2_S3-S5.png)

![Alineamiento dos a dos de S4 vs S5, con 9 aa cada secuencia y 8 coincidencias, tiene un score 8/9.](Ej2/Alineamiento_2a2_S4-S5.png)

#### 2. Construcción de la matriz de distancias

La matriz de distancias se construyó a partir del score de similitud, aplicando la transformación:´ $$ d = 1 - \text{score} $$

Obteniendo la siguiente matriz de distancias que se puede observar en la parte superior de @fig-ej2-2:

|     | S1   | S2   | S3   | S4   | S5   |
|-----|------|------|------|------|------|
| S1  | 0.00 | 0.20 | 0.44 | 0.58 | 0.47 |
| S2  | 0.20 | 0.00 | 0.56 | 0.26 | 0.16 |
| S3  | 0.44 | 0.56 | 0.00 | 0.53 | 0.65 |
| S4  | 0.58 | 0.26 | 0.53 | 0.00 | 0.11 |
| S5  | 0.47 | 0.16 | 0.65 | 0.11 | 0.00 |

#### 3. Construcción del árbol guía de forma manual

A partir de la matriz de distancias, se generó el arbol guía utilizando el método de unión de vecinos (*Neighbor Joining*). El árbol guía obtenido muestra la relación evolutiva entre las secuencias y nos sirve como base para la alineación progresiva. El proceso de generación del arbol guía se hizo de forma manueal y se muestra en @fig-ej2-2.

![Construcción de matrices de distancias.](Ej2/Matriz_distancias_BLOSUM40.jpeg){#fig-ej2-2, width="80%"}

El arbol guía obtenido finalmente fue el mostrado en @fig-ej2-3.

![Guide Tree obtenido a partir de alineamientos 2 a 2 con parámetros similares al ejercicio 1.](Ej2/GuideTree_Pairwise_BLOSUM40.jpeg){#fig-ej2-3, width="50%"}

#### 4. Alineamiento progresivo manual

Utilizando el árbol guía, se llevó a cabo el alineamiento progresivo de las secuencias. Este alineamiento se obtuvo manualmente y posteriormente se comparará con el resultado de Clustal Omega.

El alineamiento final obtenido se muestra en @fig-ej2-4.

![Alineamiento progresivo obtenido a partir de alineamientos 2 a 2 con parámetros similares al ejercicio 1.](Ej2/Alineamiento_Progresivo_BLOSUM40.jpeg) {#fig-ej2-4}

##### Cálculo con parámetros por defecto

Además del cálculo utilizando BLOSUM40, se decidió repetir el proceso usando la matriz BLOSUM62 y los parámetros por defecto, para evaluar si el alineamiento final variaba en función de los parámetros. Los parámetros utilizados fueron los que se muestran en @fig-ej2-5.

![Parámetros para el alineamiento dos a dos por defecto.](Ej2/Parametros_pairwise_por_defecto.png){#fig-ej2-5}

Se realizaron los alineamientos por pares con estos parámetros y se generó una nueva matriz de distancias, un nuevo árbol guía y el alineamiento progresivo correspondiente.

Los scores obtenidos con estos parámetros fueron se muestran en la siguiente tabla:

| Secuencias comparadas | Longitud 1 | Longitud 2 | Coincidencias | Score |
|-----------------------|------------|------------|---------------|-------|
| S1 vs S2              | 10         | 10         | 7             | 7/10  |
| S1 vs S3              | 10         | 8          | 5             | 5/9   |
| S1 vs S4              | 10         | 9          | 4             | 8/19  |
| S1 vs S5              | 10         | 9          | 5             | 10/19 |
| S2 vs S3              | 10         | 8          | 4             | 4/9   |
| S2 vs S4              | 10         | 9          | 7             | 14/19 |
| S2 vs S5              | 10         | 9          | 8             | 16/19 |
| S3 vs S4              | 8          | 9          | 3             | 6/17  |
| S3 vs S5              | 8          | 9          | 3             | 6/17  |
| S4 vs S5              | 9          | 9          | 8             | 8/9   |

Y los alineamientos obtenidos se muestran a continuación:

![Alineamiento dos a dos con parámetros por defecto, de S1 vs S2, con 10 aa cada secuencia y 7 coincidencias, tiene un score 7/10.](Ej2/Alineamiento_2a2_S1-S2_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S1 vs S3, con 10 aa en S1 y 8 aa en S3; y 5 coincidencias, tiene un score 5/9.](Ej2/Alineamiento_2a2_S1-S3_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S1 vs S4, con 10 aa en S1 y 9 aa en S4; y 4 coincidencias, tiene un score 8/19.](Ej2/Alineamiento_2a2_S1-S4_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S1 vs S5, con 10 aa en S1 y 9 aa en S5; y 5 coincidencias, tiene un score 10/19.](Ej2/Alineamiento_2a2_S1-S5_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S2 vs S3, con 10 aa en S2 y 8 aa en S3; y 4 coincidencias, tiene un score 4/9.](Ej2/Alineamiento_2a2_S2-S3_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S2 vs S4, con 10 aa en S2 y 9 aa en S4; y 7 coincidencias, tiene un score 14/19.](Ej2/Alineamiento_2a2_S2-S4_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S2 vs S5, con 10 aa en S2 y 9 aa en S5; y 8 coincidencias, tiene un score 16/19.](Ej2/Alineamiento_2a2_S2-S5_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S3 vs S4, con 8 aa en S3 y 9 aa en S4; y 3 coincidencias, tiene un score 6/17.](Ej2/Alineamiento_2a2_S3-S4_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S3 vs S5, con 8 aa en S3 y 9 aa en S5; y 3 coincidencias, tiene un score 6/17.](Ej2/Alineamiento_2a2_S3-S5_def.png)

![Alineamiento dos a dos con parámetros por defecto, de S4 vs S5, con 9 aa cada secuencia y 8 coincidencias, tiene un score 8/9.](Ej2/Alineamiento_2a2_S4-S5_def.png)

Con ello, contruimos la matriz de distancias: 

\| \| S1 \| S2 \| S3 \| S4 \| S5 \| \|-----\|------\|------\|------\|------\|------\| \| S1 \| 0.00 \| 0.30 \| 0.44 \| 0.58 \| 0.47 \| \| S2 \| 0.30 \| 0.00 \| 0.56 \| 0.26 \| 0.16 \| \| S3 \| 0.44 \| 0.56 \| 0.00 \| 0.53 \| 0.65 \| \| S4 \| 0.58 \| 0.26 \| 0.53 \| 0.00 \| 0.11 \| \| S5 \| 0.47 \| 0.16 \| 0.65 \| 0.11 \| 0.00 \|

Y se llevó a cabo el alineamiento progresivo de forma análaga al anteior (@fig-ej2-6)

![Construcción de matrices de distancias.](Ej2/Matriz_distancias_BLOSUM62.jpeg){#fig-ej2-6, width="80%"}

Finalmente, construímos el guide tree:

![Guide Tree obtenido a partir de alineamientos 2 a 2](Ej2/GuideTree_Pairwise_BLOSUM62.jpeg){width="50%"}

Y el alineamiento progresivo:

![Alineamiento progresivo obtenido a partir de alineamientos 2 a 2 con matriz BLOSUM62](Ej2/Alineamiento_Progresivo_BLOSUM62.jpeg)

#### Alineamiento múltiple

Los parámetros utilizados para realizar este proceso fueron:

![Parámetros para el alineamiento múltiple.](Ej2/Parametros_clustal.png)

Obtivos el siguiente guide tree:

![Guide tree del alineamiento múltiple por Clustal Omega.](Ej2/GuideTree_clustalOmega_MSA.png)

Y este alineamiento múltiple:

![Alineamiento múltiple por Clustal Omega.](Ej2/Alineamiento_clustalOmega_MSA_bonito.png)

#### Comparación y logo

Observamos que los guide tree obtenidos por ambos alineamientos dos a dos, difieren entre sí y con el guide tree obtenido por el Clustal Omega; siendo común entre ellos únicamente el grupo S4-S5.

Respecto a los alineamientos progresivos obtenidos en los alineamientos 2 a 2 con la BLOSUM40 y BLOSUM62, son muy semejantes, variando únicamente por a posición de la segunda prolina (P) de la S1, debido a la utilización de distintas matrices de sustitución y los diferentes valores utilizados para penalizar los gaps.

Ambas varían mucho del alineamiento múltiple obtenido mediante el Clustal Omega, debido a que este método es heurístico y no garantiza encontrar el alineamiento globalmente óptimo, teniendo dificultad frente a deleciones e inserciones, en las que incluye gaps; siendo crucial la importancia de los parámetros introducidos para que esta se ajuste a la realidad. En el peor de los casos se utilizan valores predeterminados (como ocurre con Clustal Omega (1.2.4)), que pueden no ser ideales para todo el conjunto de datos.

##### Logo del alineamiento progresivo del alineamiento dos a dos mediante la BLOSUM40

Cargamos las librerías necesarias, cargamos los documentos FASTA de los alineamientos progresivos y obtuvimos el logo de ambos alineamientos dos a dos y del Clustal Omega.

```{python}
#Importación de librerías
from Bio import AlignIO
import logomaker
import matplotlib.pyplot as plt
import numpy as np
```

```{python}
# Cargar y procesar el alineamiento
alignment = AlignIO.read("Alineamiento_final_BLOUSUM40.fa", "fasta")
sequences = [str(record.seq) for record in alignment]

# Crear matriz de conteos (sin gaps)
counts_matrix = logomaker.alignment_to_matrix(sequences, to_type='counts',\
   characters_to_ignore='-')

# Convertir a frecuencias relativas (ignorando gaps)
frequency_matrix = counts_matrix.div(counts_matrix.sum(axis=1), axis=0)

# Calcular información (en bits) para cada posición
information_matrix = logomaker.transform_matrix(frequency_matrix, \
  from_type='probability', to_type='information')

# Crear el logo
logo = logomaker.Logo(
    information_matrix,  # Usamos la matriz de información directamente
    color_scheme='chemistry',
    font_name='Arial',
    show_spines=True,
    stack_order='big_on_top'
)

# Limitar bits a 4.32 si es necesario
logo.ax.set_ylim(0, 4.32)

# Personalización adicional
logo.ax.set_title("Logo de alineamiento progresivo con la BLOSUM40")
logo.ax.set_xlabel("Posición")
logo.ax.set_ylabel("Bits")
logo.ax.set_ylim(0, 3)

plt.tight_layout()
plt.show()
```

##### Logo del alineamiento progresivo del alineamiento dos a dos mediante la BLOSUM40

```{python}
from Bio import AlignIO
import logomaker
import matplotlib.pyplot as plt
import numpy as np

# Cargar y procesar el alineamiento
alignment = AlignIO.read("Alineamiento_final_BLOUSUM62.fa", "fasta")
sequences = [str(record.seq) for record in alignment]

# Crear matriz de conteos (sin gaps)
counts_matrix = logomaker.alignment_to_matrix(sequences, to_type='counts',\
   characters_to_ignore='-')

# Convertir a frecuencias relativas (ignorando gaps)
frequency_matrix = counts_matrix.div(counts_matrix.sum(axis=1), axis=0)

# Calcular información (en bits) para cada posición
information_matrix = logomaker.transform_matrix(frequency_matrix, \
  from_type='probability', to_type='information')

# Crear el logo
logo = logomaker.Logo(
    information_matrix,  # Usamos la matriz de información directamente
    color_scheme='chemistry',
    font_name='Arial',
    show_spines=True,
    stack_order='big_on_top'
)

# Limitar bits a 4.32 si es necesario
logo.ax.set_ylim(0, 4.32)

# Personalización adicional
logo.ax.set_title("Logo de alineamiento progresivo con la BLOSUM62")
logo.ax.set_xlabel("Posición")
logo.ax.set_ylabel("Bits")
logo.ax.set_ylim(0, 3)

plt.tight_layout()
plt.show()
```

##### Logo del MSA por Clustal Omega

```{python}
from Bio import AlignIO
import logomaker
import matplotlib.pyplot as plt
import numpy as np

# Cargar y procesar el alineamiento
alignment = AlignIO.read("clustalo-I20250321-165928-0743-92365021-p1m.fa", \
  "fasta")
sequences = [str(record.seq) for record in alignment]

# Crear matriz de conteos (sin gaps)
counts_matrix = logomaker.alignment_to_matrix(sequences, to_type='counts', \
  characters_to_ignore='-')

# Convertir a frecuencias relativas (ignorando gaps)
frequency_matrix = counts_matrix.div(counts_matrix.sum(axis=1), axis=0)

# Calcular información (en bits) para cada posición
information_matrix = logomaker.transform_matrix(frequency_matrix, \
  from_type='probability', to_type='information')

# Crear el logo
logo = logomaker.Logo(
    information_matrix,  # Usamos la matriz de información directamente
    color_scheme='chemistry',
    font_name='Arial',
    show_spines=True,
    stack_order='big_on_top'
)

# Limitar bits a 4.32 si es necesario
logo.ax.set_ylim(0, 4.32)

# Personalización adicional
logo.ax.set_title("Logo de alineamiento Clustal Omega")
logo.ax.set_xlabel("Posición")
logo.ax.set_ylabel("Bits")
logo.ax.set_ylim(0, 3)

plt.tight_layout()
plt.show()
```

De los tres logos obtenidos, podemos destacar que aquel con más variedad en las posiciones es el obtenido por el alineamiento de Clustal Omega y el que posee más similitudes es el resultante del alineamiento progresivo dos a dos mediante la BLOSUM62.

Conclusiones:

Se logró una alineación progresiva coherente con los resultados obtenidos por Clustal Omega.

Se identificaron regiones conservadas y se representaron mediante un logo de secuencias.

El uso de la matriz BLOSUM40 y penalizaciones por gap permitió obtener alineamientos con una calidad comparable a la obtenida en el ejercicio anterior.

Este ejercicio permitió comprender y aplicar el método de alineación progresiva, así como la importancia de la selección de parámetros adecuados para obtener alineamientos precisos y representativos de la relación entre secuencias.
