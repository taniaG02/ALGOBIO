{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Ejercicios2_algoritmos\"\n",
        "author: \"Tania Gonzalo y Daniel Parra\"\n",
        "format: pdf\n",
        "lang: es \n",
        "---\n",
        "\n",
        "\n",
        "## WORKSHEET\n",
        "\n",
        "### Ejercicio 1 (4 puntos)\n",
        "\n",
        "*En este ejercicio probarás el algoritmo Needleman-Wunsch en una secuencia corta de partes de hemoglobina (código PDB 1AOW) y mioglobina 1 (código PDB 1AZI). Aquí alineará la secuencia HGSAQVKGHG con la secuencia KTEAEMKASEDLKKHGT.*\n",
        "\n",
        "*Las dos secuencias están dispuestas en una matriz en la Tabla 1. Las secuencias comienzan en la esquina superior derecha, y las penalizaciones por desfase inicial se enumeran en cada posición inicial de desfase. La penalización por desfase se considera -8. Las puntuaciones de similitud Si,j procedentes de la búsqueda de coincidencias proceden de la tabla BLOSUM40.*\n",
        "\n",
        "\n",
        "Para resolver este ejercicio, hemos aplicado el algoritmo de Needleman-Wunsch para alinear dos secuencias de proteínas que nos indican: una parte de la hemoglobina (HGSAQVKGHG) y una parte de la mioglobina (KTEAEMKASEDLKKHGT). Este algoritmo de alineamiento global nos permite encontrar la mejor correspondencia entre las secuencias considerando inserciones, eliminaciones y sustituciones de aminoácidos.\n",
        "\n",
        "Para llevar a cabo la alineación, seguimos los siguientes pasos:\n",
        "\n",
        "1. **Inicialización de la matriz**: Se construyó una matriz en la que las secuencias se dispusieron en los ejes horizontal y vertical. Se asignaron penalizaciones de apertura de brecha (-8) en la primera fila y la primera columna.\n",
        "\n",
        "2. **Cálculo de los valores en la matriz**: Cada celda se llenó utilizando la fórmula de Needleman-Wunsch:\n",
        "\n",
        "   $$\n",
        "   F(i,j) = \\max \\begin{cases} \n",
        "   F(i-1,j-1) + S(i,j) & \\text{(match o mismatch según la matriz BLOSUM40)} \\\\\n",
        "   F(i-1,j) + \\text{gap penalty} & \\text{(inserción)} \\\\\n",
        "   F(i,j-1) + \\text{gap penalty} & \\text{(eliminación)}\n",
        "   \\end{cases}\n",
        "   $$\n",
        "\n",
        "   Donde $S(i,j)$ es el puntaje de sustitución obtenido de la matriz BLOSUM40.\n",
        "   \n",
        "   La tabla obtenida se muestra en @fig-ej1 donde aparecen todas las celdas rellenas además de las flechas indicativas de la procedencia de cada uno de los números para posteriormente poder llevar a cabo la recontrucción del alineamiento.\n",
        "\n",
        "3. **Obtención del score final**: Una vez completada la matriz, el score final de alineación se encuentra en la casilla inferior derecha (@fig-ej1). Como podemos observar, en nuestro caso el score optenido es de -21.\n",
        "\n",
        "4. **Retroceso para encontrar las alineaciones óptimas**: Siguiendo las flechas que indicaban la mejor elección en cada celda, realizamos un recorrido inverso para reconstruir los alineamientos óptimos. Encontramos dos posibles caminos, lo que dio lugar a dos alineaciones diferentes, ambos mostrados en la parte inferior de la @fig-ej1.\n",
        "\n",
        "Este procedimiento nos permitió obtener una alineación óptima de las secuencias, teniendo en cuenta tanto coincidencias como penalizaciones por inserciones y eliminaciones.\n",
        "\n",
        "![Solución manual del ejercicio 1. En la parte superior se mmuestra la matriz obtenida tras la aplicación del algoritmo de Needleman-Wunsch. En la parte inferior se muestran los dos alineamientos óptimos obtenidos.](Solucion_Ej1_Dani.jpeg){#fig-ej1}\n",
        "\n",
        "\n",
        "### Ejercicio 2 (6 puntos)\n",
        "\n",
        "Dado el conjunto de secuencias múltiples:\n",
        "\n",
        "-   S1: PPGVKSDCAS\n",
        "\n",
        "-   S2: PADGVKDCAS\n",
        "\n",
        "-   S3: PPDGKSDS\n",
        "\n",
        "-   S4: GADGKDCCS\n",
        "\n",
        "-   S5: GADGKDCAS\n",
        "\n",
        "Utilice el popular método de alineación progresiva para alinear globalmente el conjunto anterior de secuencias. Genere el árbol guía por unión de vecinos. Compare su resultado (alineamiento) con el de Clustal-Omega.\n",
        "\n",
        "Con el alineamiento final representa el logo. Para este proposito los caracteres nulos o gap son ignorados y no cuentan para el número de observaciones de una columna.\n",
        "\n",
        "#### Métodos\n",
        "\n",
        "Para este ejercicio decidimos utilizar EMBOSS Needle, Pairwise Sequence Alignment (PSA) para realizar los distintos alineamientos dos a dos; y Clustal Omega (1.2.4), Multiple Sequence Alignment (MSA) para el alineamiento múltiple.\n",
        "\n",
        "Los alineamientos progresivos y guide trees correspondientes a los alineamientos dos a dos, los realizamos a mano.\n",
        "\n",
        "Finalmente, obtuvimos los logos en R, utilizando los paquetes Biostrings, ggseqlogo y ggplot2.\n",
        "\n",
        "#### Alineamientos dos a dos\n",
        "\n",
        "Los parámetros que utilizamos para realizar este proceso son:\n",
        "\n",
        "![Parámetros para el alineamiento dos a dos.](Ej2/Parametros_pairwise.png)\n",
        "\n",
        "Decidimos intentar mantener unos parámetros próximos a los utilizados en el ejercicio 1: una tabla BLOSUM40 y restar 10 por cada gap (lo más próximo a 8 que estaba disponible).\n",
        "\n",
        "Obtuvimos los siguientes alineamientos son sus scores correspondientes, calculados dividiendo el número de coincidencias entre el número de residuos sin tener en cuenta los gaps:\n",
        "\n",
        "![Alineamiento dos a dos de S1 vs S2, con 10 aa cada secuencia y 8 coincidencias, tiene un score 8/10.](Ej2/Alineamiento_2a2_S1-S2.png)\n",
        "\n",
        "![Alineamiento dos a dos de S1 vs S3, con 10 aa en S1 y 8 aa en S3; y 5 coincidencias, tiene un score 5/9.](Ej2/Alineamiento_2a2_S1-S3.png)\n",
        "\n",
        "![Alineamiento dos a dos de S1 vs S4, con 10 aa en S1 y 9 aa en S4; y 4 coincidencias, tiene un score 8/19.](Ej2/Alineamiento_2a2_S1-S4.png)\n",
        "\n",
        "![Alineamiento dos a dos de S1 vs S5, con 10 aa en S1 y 9 aa en S5; y 5 coincidencias, tiene un score 10/19.](Ej2/Alineamiento_2a2_S1-S5.png)\n",
        "\n",
        "![Alineamiento dos a dos de S2 vs S3, con 10 aa en S2 y 8 aa en S3; y 4 coincidencias, tiene un score 4/9.](Ej2/Alineamiento_2a2_S2-S3.png)\n",
        "\n",
        "![Alineamiento dos a dos de S2 vs S4, con 10 aa en S2 y 9 aa en S4; y 7 coincidencias, tiene un score 14/19.](Ej2/Alineamiento_2a2_S2-S4.png)\n",
        "\n",
        "![Alineamiento dos a dos de S2 vs S5, con 10 aa en S2 y 9 aa en S5; y 8 coincidencias, tiene un score 16/19.](Ej2/Alineamiento_2a2_S2-S5.png)\n",
        "\n",
        "![Alineamiento dos a dos de S3 vs S4, con 8 aa en S3 y 9 aa en S4; y 4 coincidencias, tiene un score 8/17.](Ej2/Alineamiento_2a2_S3-S4.png)\n",
        "\n",
        "![Alineamiento dos a dos de S3 vs S5, con 8 aa en S3 y 9 aa en S5; y 3 coincidencias, tiene un score 6/17.](Ej2/Alineamiento_2a2_S3-S5.png)\n",
        "\n",
        "![Alineamiento dos a dos de S4 vs S5, con 9 aa cada secuencia y 8 coincidencias, tiene un score 8/9.](Ej2/Alineamiento_2a2_S4-S5.png)\n",
        "\n",
        "\n",
        "Y construímos la matriz de distancias, para la cual hacemos 1 - el score de similitud del alinemaiento:\n",
        "\n",
        "![Construcción de matrices de distancias.](Ej2/Matriz_distancias_BLOSUM40.jpeg){width=\"80%\"}\n",
        "\n",
        "Finalmente, construímos el guide tree:\n",
        "\n",
        "![Guide Tree obtenido a partir de alineamientos 2 a 2 con parámetros similares al ejercicio 1.](Ej2/GuideTree_Pairwise_BLOSUM40.jpeg){width=\"50%\"}\n",
        "\n",
        "Y el alineamiento progresivo:\n",
        "\n",
        "![Alineamiento progresivo obtenido a partir de alineamientos 2 a 2 con parámetros similares al ejercicio 1.](Ej2/Alineamiento_Progresivo_BLOSUM40.jpeg)\n",
        "\n",
        "##### Con parámetros por defecto\n",
        "\n",
        "También, decidimos repetir este proceso pero dejando los parámetros que vienen por defecto, para comprobar si generaríamos el mismo alineamiento independientemente de los parámetros escogidos:\n",
        "\n",
        "![Parámetros para el alineamiento dos a dos por defecto.](Ej2/Parametros_pairwise_por_defecto.png)\n",
        "\n",
        "Los alineamientos y scores obtenidos con estos parámetros fueron:\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S1 vs S2, con 10 aa cada secuencia y 7 coincidencias, tiene un score 7/10.](Ej2/Alineamiento_2a2_S1-S2_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S1 vs S3, con 10 aa en S1 y 8 aa en S3; y 5 coincidencias, tiene un score 5/9.](Ej2/Alineamiento_2a2_S1-S3_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S1 vs S4, con 10 aa en S1 y 9 aa en S4; y 4 coincidencias, tiene un score 8/19.](Ej2/Alineamiento_2a2_S1-S4_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S1 vs S5, con 10 aa en S1 y 9 aa en S5; y 5 coincidencias, tiene un score 10/19.](Ej2/Alineamiento_2a2_S1-S5_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S2 vs S3, con 10 aa en S2 y 8 aa en S3; y 4 coincidencias, tiene un score 4/9.](Ej2/Alineamiento_2a2_S2-S3_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S2 vs S4, con 10 aa en S2 y 9 aa en S4; y 7 coincidencias, tiene un score 14/19.](Ej2/Alineamiento_2a2_S2-S4_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S2 vs S5, con 10 aa en S2 y 9 aa en S5; y 8 coincidencias, tiene un score 16/19.](Ej2/Alineamiento_2a2_S2-S5_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S3 vs S4, con 8 aa en S3 y 9 aa en S4; y 3 coincidencias, tiene un score 6/17.](Ej2/Alineamiento_2a2_S3-S4_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S3 vs S5, con 8 aa en S3 y 9 aa en S5; y 3 coincidencias, tiene un score 6/17.](Ej2/Alineamiento_2a2_S3-S5_def.png)\n",
        "\n",
        "![Alineamiento dos a dos con parámetros por defecto, de S4 vs S5, con 9 aa cada secuencia y 8 coincidencias, tiene un score 8/9.](Ej2/Alineamiento_2a2_S4-S5_def.png)\n",
        "\n",
        "La matriz de distancias correspondiente a estos alineamientos sería:\n",
        "\n",
        "![Construcción de matrices de distancias.](Ej2/Matriz_distancias_BLOSUM62.jpeg){width=\"80%\"}\n",
        "\n",
        "Finalmente, construímos el guide tree:\n",
        "\n",
        "![Guide Tree obtenido a partir de alineamientos 2 a 2](Ej2/GuideTree_Pairwise_BLOSUM62.jpeg){width=\"50%\"}\n",
        "\n",
        "Y el alineamiento progresivo:\n",
        "\n",
        "![Alineamiento progresivo obtenido a partir de alineamientos 2 a 2 con matriz BLOSUM62](Ej2/Alineamiento_Progresivo_BLOSUM62.jpeg)\n",
        "\n",
        "\n",
        "#### Alineamiento múltiple\n",
        "\n",
        "Los parámetros utilizados para realizar este proceso fueron:\n",
        "\n",
        "![Parámetros para el alineamiento múltiple.](Ej2/Parametros_clustal.png)\n",
        "\n",
        "Obtivos el siguiente guide tree:\n",
        "\n",
        "![Guide tree del alineamiento múltiple por Clustal Omega.](Ej2/GuideTree_clustalOmega_MSA.png)\n",
        "\n",
        "Y este alineamiento múltiple:\n",
        "\n",
        "![Alineamiento múltiple por Clustal Omega.](Ej2/Alineamiento_clustalOmega_MSA_bonito.png)\n",
        "\n",
        "#### Comparación y logo\n",
        "\n",
        "Observamos que los guide tree obtenidos por ambos alineamientos dos a dos, difieren entre sí y con el guide tree obtenido por el Clustal Omega; siendo común entre ellos únicamente el grupo S4-S5. \n",
        "\n",
        "Respecto a los alineamientos progresivos obtenidos en los alineamientos 2 a 2 con la BLOSUM40 y BLOSUM62, son muy semejantes, variando únicamente por a posición de la segunda prolina (P) de la S1, debido a la utilización de distintas matrices de sustitución y los diferentes valores utilizados para penalizar los gaps.\n",
        "\n",
        "Ambas varían mucho del alineamiento múltiple obtenido mediante el Clustal Omega, debido a que este método es heurístico y no garantiza encontrar el alineamiento globalmente óptimo, teniendo dificultad frente a deleciones e inserciones, en las que incluye gaps; siendo crucial la importancia de los parámetros introducidos para que esta se ajuste a la realidad. En el peor de los casos se utilizan valores predeterminados (como ocurre con Clustal Omega (1.2.4)), que pueden no ser ideales para todo el conjunto de datos.\n",
        "\n",
        "\n",
        "##### Logo del alineamiento progresivo del alineamiento dos a dos mediante la BLOSUM40\n",
        "\n",
        "Cargamos las librerías necesarias, cargamos los documentos FASTA de los alineamientos progresivos y obtuvimos el logo de ambos alineamientos dos a dos y del Clustal Omega.\n"
      ],
      "id": "7706b7c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from Bio import AlignIO\n",
        "import logomaker\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ],
      "id": "3cb54b2b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Cargar y procesar el alineamiento\n",
        "alignment = AlignIO.read(\"Alineamiento_final_BLOUSUM40.fa\", \"fasta\")\n",
        "sequences = [str(record.seq) for record in alignment]\n",
        "\n",
        "# Crear matriz de conteos (sin gaps)\n",
        "counts_matrix = logomaker.alignment_to_matrix(sequences, to_type='counts',\\\n",
        "   characters_to_ignore='-')\n",
        "\n",
        "# Convertir a frecuencias relativas (ignorando gaps)\n",
        "frequency_matrix = counts_matrix.div(counts_matrix.sum(axis=1), axis=0)\n",
        "\n",
        "# Calcular información (en bits) para cada posición\n",
        "information_matrix = logomaker.transform_matrix(frequency_matrix, \\\n",
        "  from_type='probability', to_type='information')\n",
        "\n",
        "# Crear el logo\n",
        "logo = logomaker.Logo(\n",
        "    information_matrix,  # Usamos la matriz de información directamente\n",
        "    color_scheme='chemistry',\n",
        "    font_name='Arial',\n",
        "    show_spines=True,\n",
        "    stack_order='big_on_top'\n",
        ")\n",
        "\n",
        "# Limitar bits a 4.32 si es necesario\n",
        "logo.ax.set_ylim(0, 4.32)\n",
        "\n",
        "# Personalización adicional\n",
        "logo.ax.set_title(\"Logo de alineamiento progresivo con la BLOSUM40\")\n",
        "logo.ax.set_xlabel(\"Posición\")\n",
        "logo.ax.set_ylabel(\"Bits\")\n",
        "logo.ax.set_ylim(0, 3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "1a5f29f4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Logo del alineamiento progresivo del alineamiento dos a dos mediante la BLOSUM40\n"
      ],
      "id": "1d6ea99f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from Bio import AlignIO\n",
        "import logomaker\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Cargar y procesar el alineamiento\n",
        "alignment = AlignIO.read(\"Alineamiento_final_BLOUSUM62.fa\", \"fasta\")\n",
        "sequences = [str(record.seq) for record in alignment]\n",
        "\n",
        "# Crear matriz de conteos (sin gaps)\n",
        "counts_matrix = logomaker.alignment_to_matrix(sequences, to_type='counts',\\\n",
        "   characters_to_ignore='-')\n",
        "\n",
        "# Convertir a frecuencias relativas (ignorando gaps)\n",
        "frequency_matrix = counts_matrix.div(counts_matrix.sum(axis=1), axis=0)\n",
        "\n",
        "# Calcular información (en bits) para cada posición\n",
        "information_matrix = logomaker.transform_matrix(frequency_matrix, \\\n",
        "  from_type='probability', to_type='information')\n",
        "\n",
        "# Crear el logo\n",
        "logo = logomaker.Logo(\n",
        "    information_matrix,  # Usamos la matriz de información directamente\n",
        "    color_scheme='chemistry',\n",
        "    font_name='Arial',\n",
        "    show_spines=True,\n",
        "    stack_order='big_on_top'\n",
        ")\n",
        "\n",
        "# Limitar bits a 4.32 si es necesario\n",
        "logo.ax.set_ylim(0, 4.32)\n",
        "\n",
        "# Personalización adicional\n",
        "logo.ax.set_title(\"Logo de alineamiento progresivo con la BLOSUM62\")\n",
        "logo.ax.set_xlabel(\"Posición\")\n",
        "logo.ax.set_ylabel(\"Bits\")\n",
        "logo.ax.set_ylim(0, 3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "b3847faa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Logo del MSA por Clustal Omega\n"
      ],
      "id": "63799766"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from Bio import AlignIO\n",
        "import logomaker\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Cargar y procesar el alineamiento\n",
        "alignment = AlignIO.read(\"clustalo-I20250321-165928-0743-92365021-p1m.fa\", \\\n",
        "  \"fasta\")\n",
        "sequences = [str(record.seq) for record in alignment]\n",
        "\n",
        "# Crear matriz de conteos (sin gaps)\n",
        "counts_matrix = logomaker.alignment_to_matrix(sequences, to_type='counts', \\\n",
        "  characters_to_ignore='-')\n",
        "\n",
        "# Convertir a frecuencias relativas (ignorando gaps)\n",
        "frequency_matrix = counts_matrix.div(counts_matrix.sum(axis=1), axis=0)\n",
        "\n",
        "# Calcular información (en bits) para cada posición\n",
        "information_matrix = logomaker.transform_matrix(frequency_matrix, \\\n",
        "  from_type='probability', to_type='information')\n",
        "\n",
        "# Crear el logo\n",
        "logo = logomaker.Logo(\n",
        "    information_matrix,  # Usamos la matriz de información directamente\n",
        "    color_scheme='chemistry',\n",
        "    font_name='Arial',\n",
        "    show_spines=True,\n",
        "    stack_order='big_on_top'\n",
        ")\n",
        "\n",
        "# Limitar bits a 4.32 si es necesario\n",
        "logo.ax.set_ylim(0, 4.32)\n",
        "\n",
        "# Personalización adicional\n",
        "logo.ax.set_title(\"Logo de alineamiento Clustal Omega\")\n",
        "logo.ax.set_xlabel(\"Posición\")\n",
        "logo.ax.set_ylabel(\"Bits\")\n",
        "logo.ax.set_ylim(0, 3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "23a0f1fd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "De los tres logos obtenidos, podemos destacar que aquel con más variedad en las posiciones es el obtenido por el alineamiento de Clustal Omega y el que posee más similitudes es el resultante del alineamiento progresivo dos a dos mediante la BLOSUM62."
      ],
      "id": "3c81e37d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}